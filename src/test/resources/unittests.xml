<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2013 Rimero Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<project basedir="../../../"
         xmlns:au="antlib:org.apache.ant.antunit"
         xmlns:git="antlib:com.rimerosolutions.ant.git"
         xmlns="antlib:org.apache.tools.ant">

        <taskdef uri="antlib:com.rimerosolutions.ant.git"
                 resource="com/rimerosolutions/ant/git/jgit-ant-lib.xml">
                <classpath>
                        <path refid="compile.classpath"/>
                        <path refid="classes.location"/>
                </classpath>
        </taskdef>

        <pathconvert property="testData.folder" refid="testData.location"/>
        <property name="dummy.patch.file" value="${testData.folder}/data-patch.txt"/>
        <property name="branchlist.file" value="${testData.folder}/branch-list.txt"/>
        <property name="branchlist.file.baseline" value="${testData.folder}/branch-list-baseline.txt"/>
        <property name="taglist.file" value="${testData.folder}/tag-list.txt"/>
        <property name="taglist.file.baseline" value="${testData.folder}/tag-list-baseline.txt"/>
        <property name="testLocalRepo" value="${testData.folder}/testLocalRepo"/>
        <property name="testLocalRepoClone" value="${testData.folder}/testLocalRepoClone"/>
        <property name="dummy.commit.message" value="Initial commit"/>
        <property name="dummy.checkout.branch" value="feature/checkout"/>
        <property name="dummy.tag.name" value="dummytag"/>
        <property name="master.branch.name" value="master"/>

        <!-- ================================ -->
        <!-- Test lifecycle -->
        <!-- ================================ -->
        <target name="setUp">
                <mkdir dir="${testLocalRepo}"/>
                <mkdir dir="${testLocalRepoClone}"/>
        </target>

        <target name="tearDown">
                <delete dir="${testLocalRepo}" quiet="true"/>
                <delete dir="${testLocalRepoClone}" quiet="true"/>
                <delete file="${branchlist.file}" quiet="true"/>
                <delete file="${taglist.file}" quiet="true"/>
        </target>

        <macrodef name="initLocalRepo" description="Macro to ensure good setUp-tearDown behavior">
                <sequential>
                        <git:settings refId="git.testing"
                                      username="xxxtesting"
                                      password="xxxtesting"
                                      name="xxxtesting"
                                      email="xxxtesting@gmail.com"/>

                        <git:git localDirectory="${testLocalRepo}" settingsRef="git.testing">
                                <git:init directory="${testLocalRepo}" bare="false" />
                                <git:commit message="${dummy.commit.message}" revCommitIdProperty="revcommit"/>
                        </git:git>
                </sequential>
        </macrodef>

        <!-- ================================ -->
        <!-- Tags -->
        <!-- ================================ -->
        <target name="testTagDelete" description="Test git-tag-delete">
                <initLocalRepo/>

                <git:git localDirectory="${testLocalRepo}" verbose="true">
                        <git:tag name="${dummy.tag.name}"/>
                        <git:tagdelete tags="${dummy.tag.name}"/>
                </git:git>

                <au:expectfailure>
                        <git:git localDirectory="${testLocalRepo}" verbose="true">
                                <git:taglist verifycontainnames="${dummy.tag.name}" failonerror="true"/>
                        </git:git>
                </au:expectfailure>
        </target>

        <target name="testTagAdd" description="Test git-tag-add">
                <initLocalRepo/>

                <git:git localDirectory="${testLocalRepo}" verbose="true">
                        <git:tag name="${dummy.tag.name}"/>
                        <git:taglist outputfilename="${taglist.file}" verifycontainnames="${dummy.tag.name}" failonerror="true"/>
                </git:git>
        </target>

        <target name="testTagList" description="Test git-tag-list">
                <initLocalRepo/>

                <git:git localDirectory="${testLocalRepo}" verbose="true">
                        <git:tag name="${dummy.tag.name}"/>
                        <git:taglist outputfilename="${taglist.file}" failonerror="true"/>
                </git:git>

                <au:assertFileExists file="${taglist.file}"/>

                <au:assertResourceContains resource="${taglist.file.baseline}"
                                           value="${dummy.tag.name}"
                                           message="Cannot find tag ${dummy.tag.name} in tag list baseline"/>

                <au:assertResourceContains resource="${taglist.file}"
                                           value="${dummy.tag.name}"
                                           message="Cannot find tag ${dummy.tag.name} in tag list dump"/>

                <au:assertFilesMatch expected="${taglist.file.baseline}"
                                     actual="${taglist.file}"
                                     message="Tags list don't match baseline"/>
        </target>

        <!-- ================================ -->
        <!-- Branches -->
        <!-- ================================ -->
        <target name="testBranchDelete" description="Test git-branch-delete">
                <initLocalRepo/>

                <au:expectfailure>
                        <git:git localDirectory="${testLocalRepo}" verbose="true">
                                <git:checkout branchName="${dummy.checkout.branch}" createBranch="true"/>
                                <git:branchDelete failonerror="true" branches="${dummy.checkout.branch}"/>
                        </git:git>
                </au:expectfailure>

                <git:git localDirectory="${testLocalRepo}" verbose="true">
                        <git:checkout branchName="${master.branch.name}"/>
                        <git:branchDelete failonerror="true" branches="${dummy.checkout.branch}"/>
                </git:git>
        </target>

        <target name="testBranchList" description="Test git-branch-list">
                <initLocalRepo/>

                <git:git localDirectory="${testLocalRepo}" verbose="true">
                        <git:checkout branchName="${dummy.checkout.branch}" createBranch="true"/>
                        <git:branchlist outputfilename="${branchlist.file}"/>
                </git:git>

                <au:assertFileExists file="${branchlist.file}"/>

                <au:assertResourceContains resource="${branchlist.file.baseline}"
                                           value="${dummy.checkout.branch}"
                                           message="Cannot find branch ${dummy.checkout.branch} in branch list baseline"/>

                <au:assertResourceContains resource="${branchlist.file}"
                                           value="${dummy.checkout.branch}"
                                           message="Cannot find branch ${dummy.checkout.branch} in branch list dump"/>

                <au:assertFilesMatch expected="${branchlist.file.baseline}"
                                     actual="${branchlist.file}"
                                     message="Branches list don't match baseline"/>
        </target>

        <target name="testCheckout" description="Test git-checkout">
                <initLocalRepo/>

                <git:git localDirectory="${testLocalRepo}" verbose="true">
                        <git:checkout branchName="${dummy.checkout.branch}" createBranch="true"/>
                        <git:branchlist  verifycontainnames="${dummy.checkout.branch}"
                                         outputfilename="${branchlist.file}"
                                         failonerror="true"/>
                </git:git>
        </target>

        <!-- ================================ -->
        <!-- Others -->
        <!-- ================================ -->
        <target name="testClone" description="Test git-clone">
                <initLocalRepo/>

                <git:git localDirectory="${testLocalRepoClone}" verbose="true">
                        <git:clone uri="file://${testLocalRepo}/.git" directory="${testLocalRepoClone}"/>
                </git:git>

                <au:assertFileExists file="${testLocalRepoClone}/.git/index"/>
        </target>

        <target name="testAdd" description="Test git-add">
                <initLocalRepo/>
                <echo file="${testLocalRepo}/test.txt" message="test"/>

                <git:git localDirectory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:add>
                                <fileset dir="${testLocalRepo}" includes="*.txt"/>
                        </git:add>
                        <git:commit message="${dummy.commit.message}" revCommitIdProperty="testAdd.revcommit"/>
                        <git:uptodate failOnError="true"/>
                </git:git>
        </target>

        <target name="testClean" description="Test git-clean">
                <initLocalRepo/>
                <echo file="${testLocalRepo}/test.txt" message="test"/>

                <git:git localDirectory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:clean/>
                        <git:uptodate failOnError="true"/>
                </git:git>

                <echo file="${testLocalRepo}/test.txt" message="test"/>

                <git:git localDirectory="${testLocalRepo}" verbose="true" settingsRef="git.testing">
                        <git:clean paths="test.txt"/>
                        <git:uptodate failOnError="true"/>
                </git:git>
        </target>

        <target name="testApply" description="Test git-apply">
                <initLocalRepo/>

                <echo file="${testLocalRepo}/file.txt" message="test file"/>

                <git:git localDirectory="${testLocalRepo}" verbose="true">
                        <git:apply updatedCountProperty="updatedCountProperty" patchfile="${dummy.patch.file}"/>
                </git:git>

                <au:assertTrue message="Only one file impacted by patch">
                        <equals arg1="${updatedCountProperty}" arg2="1"/>
                </au:assertTrue>
        </target>

        <target name="testUpToDateFailure" description="Test git-status">
                <initLocalRepo/>

                <echo file="${testLocalRepo}/test.txt" message="test"/>

                <au:expectfailure>
                        <git:git localDirectory="${testLocalRepo}" settingsRef="git.testing">
                                <git:uptodate failOnError="true"/>
                        </git:git>
                </au:expectfailure>
        </target>

        <target name="testInit" description="Test git-init">
                <initLocalRepo/>
                <au:assertFileExists file="${testLocalRepo}/.git/index"/>
        </target>
</project>
