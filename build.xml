<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2013 Rimero Solutions

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<project xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:git="antlib:com.rimerosolutions.ant.git"
         xmlns:au="antlib:org.apache.ant.antunit"
         name="ant-git-tasks"
         default="jar">

        <!-- bootstrap the ant-git-tasks release process with a snapshot of itself for now... -->
        <taskdef uri="antlib:com.rimerosolutions.ant.git"
                 resource="com/rimerosolutions/ant/git/jgit-ant-lib.xml"
                 classpath="ant-git-tasks-0.0.1-SNAPSHOT-jar-with-dependencies.jar"/>

        <!-- reuse the user's gradle properties if any for sensitive info such as gpg, credentials -->
        <property file="${user.home}/.gradle/gradle.properties"/>
        <property file="${basedir}/build.properties"/>

        <!-- release and version properties -->
        <property name="release.properties.filename" value="release.properties"/>
        <property file="${release.properties.filename}"/>
        <property name="build.number" value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>

        <condition property="project.version.classifier" value="-SNAPSHOT">
                <equals casesensitive="true" arg1="${snapshot}" arg2="true"/>
        </condition>

        <property name="project.version.classifier" value=""/>
        <property name="project.version" value="${build.number}${project.version.classifier}"/>

        <!-- general folders and files properties -->
        <property name="src.dir" value="src/main/java"/>
        <property name="test.src.dir" value="src/test/java"/>
        <property name="resources.dir" value="src/main/resources"/>
        <property name="test.resources.dir" value="src/test/resources"/>
        <property name="target.dir" value="target"/>
        <property name="test.data.dir" value="${target.dir}/testData"/>
        <property name="dist.dir" value="dist"/>
        <property name="docs.dir" value="${target.dir}/docs"/>
        <property name="cobertura.data.filename" value="cobertura.ser"/>
        <property name="cobertura.data.file" value="${test.data.dir}/${cobertura.data.filename}"/>

        <!-- reports -->
        <property name="reports.dir" value="${target.dir}/reports"/>
        <property name="reports.junit.dir" value="${reports.dir}/junit"/>
        <property name="reports.junit.xml.dir" value="${reports.junit.dir}/xml"/>
        <property name="reports.junit.html.dir" value="${reports.junit.dir}/html"/>
        <property name="reports.findbugs.dir" value="${reports.dir}/findbugs"/>
        <property name="reports.cobertura.dir" value="${reports.dir}/cobertura"/>

        <!-- classes -->
        <property name="classes.dir" value="${target.dir}/classes"/>
        <property name="test.classes.dir" value="${target.dir}/testClasses"/>
        <property name="instrumentation.dir" value="${target.dir}/instrumentedClasses"/>
        <property name="lib.dir" value="lib"/>

        <!-- javac properties -->
        <property name="javac.source" value="1.6"/>
        <property name="javac.target" value="1.6"/>
        <property name="javac.debug" value="true" />
        <property name="javac.debuglevel" value="lines,vars,source" />
        <property name="javac.encoding" value="utf-8" />

        <!-- bountycastle properties, ivy signing with pgp -->
        <property name="bountycastle.version" value="1.45"/>
        <property name="bountycastle.classifier" value="jdk16"/>
        <property name="bcpg.jar.file" value="bcpg-${bountycastle.classifier}-${bountycastle.version}.jar"/>
        <property name="bcprov.jar.file" value="bcprov-${bountycastle.classifier}-${bountycastle.version}.jar"/>

        <!-- ivy properties -->
        <property name="ivy.install.version" value="2.3.0" />
        <condition property="ivy.home" value="${env.IVY_HOME}">
                <isset property="env.IVY_HOME" />
        </condition>
        <property name="ivy.home" value="${user.home}/.ant" />
        <property name="ivy.jar.dir" value="${ivy.home}/lib" />
        <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
        <property name="ivy.lib.dir" value="${lib.dir}"/>

        <!-- maven repositories, resolvers in ivysettings.xml -->
        <property name="maven.repo.local" value="local-m2"/>
        <property name="maven.repo.sonatype.releases" value="sonatype-releases"/>
        <property name="maven.repo.sonatype.snapshots" value="sonatype-snapshots"/>

        <!-- sonatype deployment conditions -->
        <condition property="sonatype.deployment.enabled">
                <and>
                        <isset property="signing.keyId"/>
                        <isset property="signing.password"/>
                        <isset property="signing.name"/>
                        <isset property="signing.secretKeyRingFile"/>
                        <isset property="sonatype.username"/>
                        <isset property="sonatype.password"/>
                </and>
        </condition>

        <condition property="sonatype.deployment.snapshots.enabled">
                <and>
                        <isset property="sonatype.deployment.enabled"/>
                        <equals casesensitive="false" arg1="${snapshot}" arg2="true"/>
                </and>
        </condition>

        <condition property="sonatype.deployment.releases.enabled">
                <not>
                        <isset property="sonatype.deployment.snapshots.enabled"/>
                </not>
        </condition>

        <tstamp>
                <format property="build.current.time" pattern="yyyyMMdd_HHmmss" />
        </tstamp>

        <echo>Ant Git Tasks ${project.version} Build.</echo>

        <!-- ****************************************** -->
        <!-- release -->
        <!-- ****************************************** -->
        <property name="release.properties.filename" value="release.properties"/>
        <property file="${release.properties.filename}"/>
        <property name="build.number" value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>

        <condition property="snapshot-build">
                <and>
                        <isset property="snapshot"/>
                        <equals arg1="true" arg2="${snapshot}"/>
                </and>
        </condition>

        <target name="release-prepare-fix" description="Release for backwards-compatible bug fixes">
                <propertyfile file="${release.properties.filename}">
                        <entry key="build.revision.number" type="int" operation="+" value="1" pattern="0"/>
                </propertyfile>
        </target>

        <target name="release-prepare-feature" description="Release for added functionality in a backwards-compatible manner">
                <propertyfile file="${release.properties.filename}">
                        <entry key="build.minor.number" type="int" operation="+" value="1" pattern="0"/>
                        <entry key="build.revision.number" type="int" value="0" pattern="0"/>
                </propertyfile>
        </target>

        <target name="release-prepare-major" description="Release for incompatible API changes">
                <propertyfile file="${release.properties.filename}">
                        <entry key="build.major.number" type="int" operation="+" value="1" pattern="0"/>
                        <entry key="build.minor.number" type="int" value="0" pattern="0"/>
                        <entry key="build.revision.number" type="int" value="0" pattern="0"/>
                </propertyfile>
        </target>

        <target name="-pre-release">
                <echo>Checking tree modifications before release.</echo>
                <git:git localDirectory="${basedir}" verbose="true">
                        <git:uptodate modificationExistProperty="tree.modified"/>
                </git:git>
        </target>

        <target name="-commit-release" depends="-pre-release" if="tree.modified">
                <echo>Committing before release SCM tagging.</echo>
                <git:git localDirectory="${basedir}" verbose="true">
                        <git:commit message="[${ant.project.name}] Preparing release ${project.version}"/>
                        <git:uptodate failOnError="true"/>
                        <git:push username="${github.username}" password="${github.password}"/>
                </git:git>
        </target>

        <target name="-tag-release" depends="-commit-release" unless="snapshot-build">
                <echo>Tagging release ${build.number}.</echo>
                <git:git localDirectory="${basedir}" verbose="true">
                        <git:tag name="${build.number}"/>
                        <git:push username="${github.username}" password="${github.password}"/>
                </git:git>
        </target>

        <target name="release-perform" depends="-tag-release" description="Perform a release"/>

        <!-- ****************************************** -->
        <!-- ivy -->
        <!-- ****************************************** -->
        <target name="-bootstrap-build" unless="offline">
                <echo>Fetching ivy.</echo>
                <mkdir dir="${ivy.jar.dir}"/>
                <!-- download Ivy from web site so that it can be used even without any special installation -->
                <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
                     dest="${ivy.jar.file}"
                     usetimestamp="true"/>

                <echo>Fetching gpg signing libraries.</echo>
                <!-- bootstrap ivy gpg signing -->
                <get src="http://repo1.maven.org/maven2/org/bouncycastle/bcprov-${bountycastle.classifier}/${bountycastle.version}/${bcprov.jar.file}"
                     dest="${ivy.home}/lib/${bcprov.jar.file}"
                     usetimestamp="true"/>

                <get src="http://repo1.maven.org/maven2/org/bouncycastle/bcpg-${bountycastle.classifier}/${bountycastle.version}/${bcpg.jar.file}"
                     dest="${ivy.home}/lib/${bcpg.jar.file}"
                     usetimestamp="true"/>
        </target>

        <target name="-init-ivy" depends="-bootstrap-build">
                <echo>Initializing Apache Ivy.</echo>
                <!-- try to load ivy here from ivy home, in case the user has not already dropped
                     it into ant's lib dir (note that the latter copy will always take precedence).
                     We will not fail as long as local lib dir exists (it may be empty) and
                     ivy is in at least one of ant's lib dir or the local lib dir. -->
                <path id="ivy.lib.path">
                        <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
                </path>

                <taskdef resource="org/apache/ivy/ant/antlib.xml"
                         uri="antlib:org.apache.ivy.ant"
                         classpathref="ivy.lib.path"/>
        </target>

        <target name="-resolve" depends="-init-ivy">
                <echo>Fetching dependencies.</echo>
                <ivy:retrieve  pattern="${ivy.lib.dir}/[conf]/[artifact].[ext]" sync="true"/>
                <ivy:cachepath pathid="compile.classpath" conf="compile" />
                <ivy:cachepath pathid="test.classpath" conf="test" />
                <ivy:cachepath pathid="findbugs.classpath" conf="findbugs"/>
                <ivy:cachepath pathid="cobertura.classpath" conf="cobertura" />
        </target>

        <!-- ****************************************** -->
        <!-- general -->
        <!-- ****************************************** -->
        <target name="init" depends="-resolve" description="Create build folder layout">
                <echo>Setting up build layout.</echo>
                <mkdir dir="${target.dir}"/>
                <mkdir dir="${lib.dir}"/>
                <mkdir dir="${docs.dir}"/>
                <mkdir dir="${classes.dir}"/>
                <mkdir dir="${test.classes.dir}"/>
                <mkdir dir="${test.data.dir}"/>
                <mkdir dir="${instrumentation.dir}"/>
                <mkdir dir="${reports.dir}"/>
                <mkdir dir="${reports.junit.xml.dir}"/>
                <mkdir dir="${reports.junit.html.dir}"/>
                <mkdir dir="${reports.findbugs.dir}"/>
                <mkdir dir="${reports.cobertura.dir}"/>
                <mkdir dir="${dist.dir}"/>
        </target>

        <target name="clean" description="Cleanup build">
                <echo>Cleaning up build.</echo>
                <delete dir="${target.dir}" failonerror="false"/>
                <delete dir="${lib.dir}" failonerror="false"/>
                <delete dir="${target.dir}" failonerror="false"/>
                <delete dir="${dist.dir}" failonerror="false"/>
        </target>

        <target name="compile" depends="init" description="Compile sources">
                <echo>Compiling sources.</echo>
                <javac source="${javac.source}"
                       target="${javac.target}"
                       debug="${javac.debug}"
                       debuglevel="${javac.debuglevel}"
                       encoding="${javac.encoding}"
                       destdir="${classes.dir}"
                       includeantruntime="false">
                        <src path="${src.dir}" />
                        <classpath refid="compile.classpath" />
                </javac>
        </target>

        <target name="copy-resources" depends="compile" description="Copy resources">
                <echo>Copying project resources.</echo>
                <copy todir="${classes.dir}">
                        <fileset dir="${resources.dir}"/>
                </copy>
        </target>

        <!-- ****************************************** -->
        <!-- testing -->
        <!-- ****************************************** -->
        <target name="compile-tests" depends="compile,copy-resources" description="Compile test sources">
                <echo>Compiling test sources.</echo>
                <javac source="${javac.source}"
                       target="${javac.target}"
                       debug="${javac.debug}"
                       debuglevel="${javac.debuglevel}"
                       encoding="${javac.encoding}"
                       destdir="${test.classes.dir}"
                       includeantruntime="false">
                        <src path="${test.src.dir}"/>
                        <classpath>
                                <path refid="test.classpath"/>
                                <path refid="compile.classpath"/>
                                <path location="${classes.dir}"/>
                        </classpath>
                </javac>
        </target>

        <target name="-instrument-tests" depends="compile-tests">
                <delete file="${cobertura.data.file}" failonerror="false"/>

                <taskdef name="junit"
                         classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
                         classpathref="test.classpath"/>

                <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

                <cobertura-instrument todir="${instrumentation.dir}" datafile="${cobertura.data.file}">
                        <includeClasses regex=".*" />
                        <excludeClasses regex=".*\.Test.*"/>
                        <instrumentationClasspath>
                                <path refid="test.classpath" />
                                <pathelement location="${test.classes.dir}" />
                        </instrumentationClasspath>
                </cobertura-instrument>
        </target>

        <target name="-junit-tests" depends="-instrument-tests" >
                <echo>Running junit tests.</echo>
                <taskdef name="junit"
                         classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
                         classpathref="test.classpath"/>

                <taskdef uri="antlib:org.apache.ant.antunit"
                         resource="org/apache/ant/antunit/antlib.xml"
                         classpathref="test.classpath"/>


                <junit fork="true"
                       dir="${basedir}"
                       printsummary="yes"
                       showoutput="true"
                       haltonfailure="false"
                       errorproperty="junit.failed"
                       includeantruntime="false">

                        <sysproperty key="net.sourceforge.cobertura.datafile"
                                     file="${cobertura.data.file}" />

                        <classpath location="${classes.dir}"/>
                        <classpath location="${instrumentation.dir}"/>
                        <classpath refid="test.classpath"/>
                        <classpath refid="compile.classpath"/>
                        <classpath refid="cobertura.classpath"/>

                        <formatter type="xml"/>

                        <batchtest todir="${reports.junit.xml.dir}">
                                <fileset dir="${test.src.dir}">
                                        <include name="**/*Test*.java"/>
                                </fileset>
                        </batchtest>
                </junit>
        </target>

        <target name="-antunit-tests" depends="-instrument-tests">
                <echo>Running antunit tests.</echo>

                <taskdef uri="antlib:org.apache.ant.antunit"
                         resource="org/apache/ant/antunit/antlib.xml"
                         classpathref="test.classpath"/>

                <path id="classes.location"><pathelement location="${classes.dir}"/></path>
                <path id="testData.location"><pathelement location="${test.data.dir}"/></path>

                <au:antunit failonerror="false" errorproperty="antunit.failed">
                        <referenceset>
                                <reference refid="compile.classpath"/>
                                <reference refid="classes.location"/>
                                <reference refid="testData.location"/>
                        </referenceset>
                        <fileset dir="src/test/resources" includes="*.xml"/>
                        <au:plainlistener />
                        <au:xmllistener todir="${reports.junit.xml.dir}" />
                </au:antunit>
        </target>

        <target name="tests" depends="-junit-tests,-antunit-tests" description="Run all unit tests">
                <condition property="test.passed">
                        <and>
                                <not><isset property="junit.failed"/></not>
                                <not><isset property="antunit.failed"/></not>
                        </and>
                </condition>
        </target>

        <!-- ****************************************** -->
        <!-- code quality -->
        <!-- ****************************************** -->
        <target name="report-findbugs" depends="compile" description="Generate FindBugs report">
                <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
                         classpathref="findbugs.classpath"/>
                <findbugs classpath="findbugs.classpath"
                          classpathref="findbugs.classpath"
                          workHard="true"
                          jvmargs="-Xmx512m -Xms512m"
                          output="html"
                          outputFile="${reports.findbugs.dir}/index.html"
                          stylesheet="default.xsl">
                        <auxAnalyzePath>
                                <fileset dir="${lib.dir}" includes="**/*annotation*.jar"/>
                        </auxAnalyzePath>
                        <auxClasspath refid="compile.classpath"/>
                        <sourcePath path="${src.dir}" />
                        <class location="${classes.dir}" />
                </findbugs>
        </target>

        <target name="report-junit" depends="tests" description="Generate JUnit report">
                <junitreport todir="${reports.junit.dir}">
                        <fileset dir="${reports.junit.xml.dir}">
                                <include name="TEST-*.xml"/>
                        </fileset>
                        <report format="frames" todir="${reports.junit.html.dir}"/>
                </junitreport>
        </target>

        <target name="report-cobertura" depends="tests" description="Generate Cobertura report">
                <cobertura-report format="html" destdir="${reports.cobertura.dir}" srcdir="${src.dir}" datafile="${cobertura.data.file}"/>
        </target>

        <target name="reports" depends="report-findbugs,report-junit,report-cobertura" description="Generate reports(JUnit, FindBugs, Cobertura)">
                <fail unless="test.passed">Some test failed please take a look at the reports.</fail>
        </target>

        <!-- ****************************************** -->
        <!-- build artifacts -->
        <!-- ****************************************** -->
        <target name="jar" depends="copy-resources" description="Create main jar artefact">
                <echo>Building jar.</echo>
                <jar destfile="${dist.dir}/${ant.project.name}.jar">
                        <manifest>
                                <attribute name="Built-By" value="${user.name}"/>
                                <attribute name="Built-Date" value="${build.current.time}"/>
                                <attribute name="Implementation-Title" value="ant-git-tasks"/>
                                <attribute name="Implementation-Version" value="${project.version}"/>
                                <attribute name="Implementation-Vendor" value="Rimero Solutions Inc."/>
                        </manifest>
                        <fileset dir="${classes.dir}"/>
                </jar>
        </target>

        <target name="build" depends="jar,jar-javadoc,jar-sources,reports" description="Create the jar and generate build reports"/>

        <target name="javadoc" depends="compile" description="Generate javadocs">
                <echo>Generating Javadoc documentation.</echo>
                <javadoc packagenames="**/*.*"
                         sourcepath="${src.dir}"
                         defaultexcludes="yes"
                         destdir="${docs.dir}"
                         author="true"
                         version="true"
                         use="true"
                         windowtitle="Ant Git Taks oriented for GitHub-Sonatype worflow.">
                        <classpath>
                                <path refid="compile.classpath"/>
                        </classpath>
                        <doctitle><![CDATA[<h1>Ant Git Tasks API</h1>]]></doctitle>
                        <bottom><![CDATA[<i>Copyright &#169; 2013 Rimero Solutions Inc. All Rights Reserved.</i>]]></bottom>
                        <link href="http://download.oracle.com/javase/6/docs/api/" />
                        <link href="http://download.eclipse.org/jgit/docs/latest/apidocs/" />
                        <link href="http://javadoc.haefelinger.it/org.apache.ant/1.7.1/"/>
                </javadoc>
        </target>

        <target name="jar-sources" depends="compile" description="Generate sources jar">
                <echo>Generating sources jar.</echo>
                <zip destfile="${dist.dir}/${ant.project.name}-sources.jar">
                        <zipfileset dir="${src.dir}" />
                        <zipfileset dir="${resources.dir}" />
                </zip>
        </target>

        <target name="jar-javadoc" depends="javadoc" description="Generate javadocs jar">
                <echo>Generating sources jar.</echo>
                <zip destfile="${dist.dir}/${ant.project.name}-javadoc.jar">
                        <zipfileset dir="${docs.dir}" />
                </zip>
        </target>

        <!-- ****************************************** -->
        <!-- maven related -->
        <!-- ****************************************** -->

        <target name="maven-pom"
                depends="build"
                description="Generate the Maven POM for artifacts publishing">
                <echo>Generating Maven POM.</echo>
                <ivy:makepom ivyfile="${basedir}/ivy.xml"
                             description="Apache Ant Git Tasks"
                             templatefile="templates/pom.xml"
                             pomfile="${dist.dir}/${ant.project.name}.pom">
                        <mapping conf="compile" scope="compile"/>
                </ivy:makepom>
        </target>

        <macrodef name="maven-publish">
                <attribute name="mavenRepoId"/>
                <sequential>
                        <echo>Publishing build artifacts to your Maven repository with id @{mavenRepoId}.</echo>
                        <ivy:publish resolver="@{mavenRepoId}"
                                     pubrevision="${project.version}"
                                     overwrite="true"
                                     forcedeliver="true"
                                     publishivy="true">
                                <artifacts pattern="${dist.dir}/[artifact](-[classifier]).[ext]" />
                        </ivy:publish>
                </sequential>
        </macrodef>

        <target name="maven-publish-local"
                depends="maven-pom,-resolve,release-perform"
                description="Publish build artifacts to the local Maven repository">
                <maven-publish mavenRepoId="${maven.repo.local}"/>
        </target>

        <target name="-maven-publish-sonatype-release"
                depends="maven-pom,-resolve,release-perform"
                if="sonatype.deployment.releases.enabled">
                <maven-publish mavenRepoId="${maven.repo.sonatype.releases}"/>
        </target>

        <target name="-maven-publish-sonatype-snapshots"
                depends="maven-pom,-resolve"
                if="sonatype.deployment.snapshots.enabled">
                <maven-publish mavenRepoId="${maven.repo.sonatype.snapshots}"/>
        </target>

        <target name="maven-publish-remote"
                depends="-maven-publish-sonatype-release,-maven-publish-sonatype-snapshots"
                description="Publish build artifacts to the Sonatype Snapshots repository"/>
</project>
